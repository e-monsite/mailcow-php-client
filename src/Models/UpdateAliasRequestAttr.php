<?php
/**
 * UpdateAliasRequestAttr
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * mailcow API
 *
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailCow\Models;

use \ArrayAccess;
use \MailCow\ObjectSerializer;

/**
 * UpdateAliasRequestAttr Class Doc Comment
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UpdateAliasRequestAttr implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Update_alias_request_attr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'address' => 'string',
        'goto' => 'string',
        'gotoHam' => 'bool',
        'gotoNull' => 'bool',
        'gotoSpam' => 'bool',
        'privateComment' => 'string',
        'publicComment' => 'string',
        'sogoVisible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'address' => null,
        'goto' => null,
        'gotoHam' => null,
        'gotoNull' => null,
        'gotoSpam' => null,
        'privateComment' => null,
        'publicComment' => null,
        'sogoVisible' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'address' => 'address',
        'goto' => 'goto',
        'gotoHam' => 'goto_ham',
        'gotoNull' => 'goto_null',
        'gotoSpam' => 'goto_spam',
        'privateComment' => 'private_comment',
        'publicComment' => 'public_comment',
        'sogoVisible' => 'sogo_visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'address' => 'setAddress',
        'goto' => 'setGoto',
        'gotoHam' => 'setGotoHam',
        'gotoNull' => 'setGotoNull',
        'gotoSpam' => 'setGotoSpam',
        'privateComment' => 'setPrivateComment',
        'publicComment' => 'setPublicComment',
        'sogoVisible' => 'setSogoVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'address' => 'getAddress',
        'goto' => 'getGoto',
        'gotoHam' => 'getGotoHam',
        'gotoNull' => 'getGotoNull',
        'gotoSpam' => 'getGotoSpam',
        'privateComment' => 'getPrivateComment',
        'publicComment' => 'getPublicComment',
        'sogoVisible' => 'getSogoVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['goto'] = $data['goto'] ?? null;
        $this->container['gotoHam'] = $data['gotoHam'] ?? null;
        $this->container['gotoNull'] = $data['gotoNull'] ?? null;
        $this->container['gotoSpam'] = $data['gotoSpam'] ?? null;
        $this->container['privateComment'] = $data['privateComment'] ?? null;
        $this->container['publicComment'] = $data['publicComment'] ?? null;
        $this->container['sogoVisible'] = $data['sogoVisible'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active is alias active or not
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address alias address, for catchall use \"@domain.tld\"
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets goto
     *
     * @return string|null
     */
    public function getGoto()
    {
        return $this->container['goto'];
    }

    /**
     * Sets goto
     *
     * @param string|null $goto destination address, comma separated
     *
     * @return self
     */
    public function setGoto($goto)
    {
        $this->container['goto'] = $goto;

        return $this;
    }

    /**
     * Gets gotoHam
     *
     * @return bool|null
     */
    public function getGotoHam()
    {
        return $this->container['gotoHam'];
    }

    /**
     * Sets gotoHam
     *
     * @param bool|null $gotoHam learn as ham
     *
     * @return self
     */
    public function setGotoHam($gotoHam)
    {
        $this->container['gotoHam'] = $gotoHam;

        return $this;
    }

    /**
     * Gets gotoNull
     *
     * @return bool|null
     */
    public function getGotoNull()
    {
        return $this->container['gotoNull'];
    }

    /**
     * Sets gotoNull
     *
     * @param bool|null $gotoNull silently ignore
     *
     * @return self
     */
    public function setGotoNull($gotoNull)
    {
        $this->container['gotoNull'] = $gotoNull;

        return $this;
    }

    /**
     * Gets gotoSpam
     *
     * @return bool|null
     */
    public function getGotoSpam()
    {
        return $this->container['gotoSpam'];
    }

    /**
     * Sets gotoSpam
     *
     * @param bool|null $gotoSpam learn as spam
     *
     * @return self
     */
    public function setGotoSpam($gotoSpam)
    {
        $this->container['gotoSpam'] = $gotoSpam;

        return $this;
    }

    /**
     * Gets privateComment
     *
     * @return string|null
     */
    public function getPrivateComment()
    {
        return $this->container['privateComment'];
    }

    /**
     * Sets privateComment
     *
     * @param string|null $privateComment privateComment
     *
     * @return self
     */
    public function setPrivateComment($privateComment)
    {
        $this->container['privateComment'] = $privateComment;

        return $this;
    }

    /**
     * Gets publicComment
     *
     * @return string|null
     */
    public function getPublicComment()
    {
        return $this->container['publicComment'];
    }

    /**
     * Sets publicComment
     *
     * @param string|null $publicComment publicComment
     *
     * @return self
     */
    public function setPublicComment($publicComment)
    {
        $this->container['publicComment'] = $publicComment;

        return $this;
    }

    /**
     * Gets sogoVisible
     *
     * @return bool|null
     */
    public function getSogoVisible()
    {
        return $this->container['sogoVisible'];
    }

    /**
     * Sets sogoVisible
     *
     * @param bool|null $sogoVisible toggle visibility as selectable sender in SOGo
     *
     * @return self
     */
    public function setSogoVisible($sogoVisible)
    {
        $this->container['sogoVisible'] = $sogoVisible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


