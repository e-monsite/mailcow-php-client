<?php
/**
 * CreateSyncJobRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * mailcow API
 *
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailCow\Models;

use \ArrayAccess;
use \MailCow\ObjectSerializer;

/**
 * CreateSyncJobRequest Class Doc Comment
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreateSyncJobRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Create_sync_job_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'parameters' => 'string',
        'host1' => 'string',
        'port1' => 'string',
        'password' => 'string',
        'enc1' => 'string',
        'minsInternal' => 'float',
        'subfolder2' => 'string',
        'maxage' => 'float',
        'maxbytespersecond' => 'float',
        'timeout1' => 'float',
        'timeout2' => 'float',
        'exclude' => 'string',
        'customParams' => 'string',
        'delete2duplicates' => 'bool',
        'delete1' => 'bool',
        'delete2' => 'bool',
        'automap' => 'bool',
        'skipcrossduplicates' => 'bool',
        'subscribeall' => 'bool',
        'active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'parameters' => null,
        'host1' => null,
        'port1' => null,
        'password' => null,
        'enc1' => null,
        'minsInternal' => null,
        'subfolder2' => null,
        'maxage' => null,
        'maxbytespersecond' => null,
        'timeout1' => null,
        'timeout2' => null,
        'exclude' => null,
        'customParams' => null,
        'delete2duplicates' => null,
        'delete1' => null,
        'delete2' => null,
        'automap' => null,
        'skipcrossduplicates' => null,
        'subscribeall' => null,
        'active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parameters' => 'parameters',
        'host1' => 'host1',
        'port1' => 'port1',
        'password' => 'password',
        'enc1' => 'enc1',
        'minsInternal' => 'mins_internal',
        'subfolder2' => 'subfolder2',
        'maxage' => 'maxage',
        'maxbytespersecond' => 'maxbytespersecond',
        'timeout1' => 'timeout1',
        'timeout2' => 'timeout2',
        'exclude' => 'exclude',
        'customParams' => 'custom_params',
        'delete2duplicates' => 'delete2duplicates',
        'delete1' => 'delete1',
        'delete2' => 'delete2',
        'automap' => 'automap',
        'skipcrossduplicates' => 'skipcrossduplicates',
        'subscribeall' => 'subscribeall',
        'active' => 'active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parameters' => 'setParameters',
        'host1' => 'setHost1',
        'port1' => 'setPort1',
        'password' => 'setPassword',
        'enc1' => 'setEnc1',
        'minsInternal' => 'setMinsInternal',
        'subfolder2' => 'setSubfolder2',
        'maxage' => 'setMaxage',
        'maxbytespersecond' => 'setMaxbytespersecond',
        'timeout1' => 'setTimeout1',
        'timeout2' => 'setTimeout2',
        'exclude' => 'setExclude',
        'customParams' => 'setCustomParams',
        'delete2duplicates' => 'setDelete2duplicates',
        'delete1' => 'setDelete1',
        'delete2' => 'setDelete2',
        'automap' => 'setAutomap',
        'skipcrossduplicates' => 'setSkipcrossduplicates',
        'subscribeall' => 'setSubscribeall',
        'active' => 'setActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parameters' => 'getParameters',
        'host1' => 'getHost1',
        'port1' => 'getPort1',
        'password' => 'getPassword',
        'enc1' => 'getEnc1',
        'minsInternal' => 'getMinsInternal',
        'subfolder2' => 'getSubfolder2',
        'maxage' => 'getMaxage',
        'maxbytespersecond' => 'getMaxbytespersecond',
        'timeout1' => 'getTimeout1',
        'timeout2' => 'getTimeout2',
        'exclude' => 'getExclude',
        'customParams' => 'getCustomParams',
        'delete2duplicates' => 'getDelete2duplicates',
        'delete1' => 'getDelete1',
        'delete2' => 'getDelete2',
        'automap' => 'getAutomap',
        'skipcrossduplicates' => 'getSkipcrossduplicates',
        'subscribeall' => 'getSubscribeall',
        'active' => 'getActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parameters'] = $data['parameters'] ?? null;
        $this->container['host1'] = $data['host1'] ?? null;
        $this->container['port1'] = $data['port1'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['enc1'] = $data['enc1'] ?? null;
        $this->container['minsInternal'] = $data['minsInternal'] ?? null;
        $this->container['subfolder2'] = $data['subfolder2'] ?? null;
        $this->container['maxage'] = $data['maxage'] ?? null;
        $this->container['maxbytespersecond'] = $data['maxbytespersecond'] ?? null;
        $this->container['timeout1'] = $data['timeout1'] ?? null;
        $this->container['timeout2'] = $data['timeout2'] ?? null;
        $this->container['exclude'] = $data['exclude'] ?? null;
        $this->container['customParams'] = $data['customParams'] ?? null;
        $this->container['delete2duplicates'] = $data['delete2duplicates'] ?? null;
        $this->container['delete1'] = $data['delete1'] ?? null;
        $this->container['delete2'] = $data['delete2'] ?? null;
        $this->container['automap'] = $data['automap'] ?? null;
        $this->container['skipcrossduplicates'] = $data['skipcrossduplicates'] ?? null;
        $this->container['subscribeall'] = $data['subscribeall'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parameters
     *
     * @return string|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param string|null $parameters your local mailcow mailbox
     *
     * @return self
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets host1
     *
     * @return string|null
     */
    public function getHost1()
    {
        return $this->container['host1'];
    }

    /**
     * Sets host1
     *
     * @param string|null $host1 the smtp server where mails should be synced from
     *
     * @return self
     */
    public function setHost1($host1)
    {
        $this->container['host1'] = $host1;

        return $this;
    }

    /**
     * Gets port1
     *
     * @return string|null
     */
    public function getPort1()
    {
        return $this->container['port1'];
    }

    /**
     * Sets port1
     *
     * @param string|null $port1 the smtp port of the target mail server
     *
     * @return self
     */
    public function setPort1($port1)
    {
        $this->container['port1'] = $port1;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password the password of the mailbox
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets enc1
     *
     * @return string|null
     */
    public function getEnc1()
    {
        return $this->container['enc1'];
    }

    /**
     * Sets enc1
     *
     * @param string|null $enc1 the encryption method used to connect to the mailserver
     *
     * @return self
     */
    public function setEnc1($enc1)
    {
        $this->container['enc1'] = $enc1;

        return $this;
    }

    /**
     * Gets minsInternal
     *
     * @return float|null
     */
    public function getMinsInternal()
    {
        return $this->container['minsInternal'];
    }

    /**
     * Sets minsInternal
     *
     * @param float|null $minsInternal the interval in which messages should be syned
     *
     * @return self
     */
    public function setMinsInternal($minsInternal)
    {
        $this->container['minsInternal'] = $minsInternal;

        return $this;
    }

    /**
     * Gets subfolder2
     *
     * @return string|null
     */
    public function getSubfolder2()
    {
        return $this->container['subfolder2'];
    }

    /**
     * Sets subfolder2
     *
     * @param string|null $subfolder2 sync into subfolder on destination (empty = do not use subfolder)
     *
     * @return self
     */
    public function setSubfolder2($subfolder2)
    {
        $this->container['subfolder2'] = $subfolder2;

        return $this;
    }

    /**
     * Gets maxage
     *
     * @return float|null
     */
    public function getMaxage()
    {
        return $this->container['maxage'];
    }

    /**
     * Sets maxage
     *
     * @param float|null $maxage only sync messages up to this age in days
     *
     * @return self
     */
    public function setMaxage($maxage)
    {
        $this->container['maxage'] = $maxage;

        return $this;
    }

    /**
     * Gets maxbytespersecond
     *
     * @return float|null
     */
    public function getMaxbytespersecond()
    {
        return $this->container['maxbytespersecond'];
    }

    /**
     * Sets maxbytespersecond
     *
     * @param float|null $maxbytespersecond max speed transfer limit for the sync
     *
     * @return self
     */
    public function setMaxbytespersecond($maxbytespersecond)
    {
        $this->container['maxbytespersecond'] = $maxbytespersecond;

        return $this;
    }

    /**
     * Gets timeout1
     *
     * @return float|null
     */
    public function getTimeout1()
    {
        return $this->container['timeout1'];
    }

    /**
     * Sets timeout1
     *
     * @param float|null $timeout1 timeout for connection to remote host
     *
     * @return self
     */
    public function setTimeout1($timeout1)
    {
        $this->container['timeout1'] = $timeout1;

        return $this;
    }

    /**
     * Gets timeout2
     *
     * @return float|null
     */
    public function getTimeout2()
    {
        return $this->container['timeout2'];
    }

    /**
     * Sets timeout2
     *
     * @param float|null $timeout2 timeout for connection to local host
     *
     * @return self
     */
    public function setTimeout2($timeout2)
    {
        $this->container['timeout2'] = $timeout2;

        return $this;
    }

    /**
     * Gets exclude
     *
     * @return string|null
     */
    public function getExclude()
    {
        return $this->container['exclude'];
    }

    /**
     * Sets exclude
     *
     * @param string|null $exclude exclude objects (regex)
     *
     * @return self
     */
    public function setExclude($exclude)
    {
        $this->container['exclude'] = $exclude;

        return $this;
    }

    /**
     * Gets customParams
     *
     * @return string|null
     */
    public function getCustomParams()
    {
        return $this->container['customParams'];
    }

    /**
     * Sets customParams
     *
     * @param string|null $customParams custom parameters
     *
     * @return self
     */
    public function setCustomParams($customParams)
    {
        $this->container['customParams'] = $customParams;

        return $this;
    }

    /**
     * Gets delete2duplicates
     *
     * @return bool|null
     */
    public function getDelete2duplicates()
    {
        return $this->container['delete2duplicates'];
    }

    /**
     * Sets delete2duplicates
     *
     * @param bool|null $delete2duplicates delete duplicates on destination (--delete2duplicates)
     *
     * @return self
     */
    public function setDelete2duplicates($delete2duplicates)
    {
        $this->container['delete2duplicates'] = $delete2duplicates;

        return $this;
    }

    /**
     * Gets delete1
     *
     * @return bool|null
     */
    public function getDelete1()
    {
        return $this->container['delete1'];
    }

    /**
     * Sets delete1
     *
     * @param bool|null $delete1 delete from source when completed (--delete1)
     *
     * @return self
     */
    public function setDelete1($delete1)
    {
        $this->container['delete1'] = $delete1;

        return $this;
    }

    /**
     * Gets delete2
     *
     * @return bool|null
     */
    public function getDelete2()
    {
        return $this->container['delete2'];
    }

    /**
     * Sets delete2
     *
     * @param bool|null $delete2 delete messages on destination that are not on source (--delete2)
     *
     * @return self
     */
    public function setDelete2($delete2)
    {
        $this->container['delete2'] = $delete2;

        return $this;
    }

    /**
     * Gets automap
     *
     * @return bool|null
     */
    public function getAutomap()
    {
        return $this->container['automap'];
    }

    /**
     * Sets automap
     *
     * @param bool|null $automap try to automap folders (\"Sent items\", \"Sent\" => \"Sent\" etc.) (--automap)
     *
     * @return self
     */
    public function setAutomap($automap)
    {
        $this->container['automap'] = $automap;

        return $this;
    }

    /**
     * Gets skipcrossduplicates
     *
     * @return bool|null
     */
    public function getSkipcrossduplicates()
    {
        return $this->container['skipcrossduplicates'];
    }

    /**
     * Sets skipcrossduplicates
     *
     * @param bool|null $skipcrossduplicates skip duplicate messages across folders (first come, first serve) (--skipcrossduplicates)
     *
     * @return self
     */
    public function setSkipcrossduplicates($skipcrossduplicates)
    {
        $this->container['skipcrossduplicates'] = $skipcrossduplicates;

        return $this;
    }

    /**
     * Gets subscribeall
     *
     * @return bool|null
     */
    public function getSubscribeall()
    {
        return $this->container['subscribeall'];
    }

    /**
     * Sets subscribeall
     *
     * @param bool|null $subscribeall subscribe all folders (--subscribeall)
     *
     * @return self
     */
    public function setSubscribeall($subscribeall)
    {
        $this->container['subscribeall'] = $subscribeall;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active enables or disables the sync job
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


