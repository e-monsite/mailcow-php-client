<?php
/**
 * EditFail2BanRequestAttr
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * mailcow API
 *
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailCow\Models;

use \ArrayAccess;
use \MailCow\ObjectSerializer;

/**
 * EditFail2BanRequestAttr Class Doc Comment
 *
 * @category Class
 * @description array containing the fail2ban settings
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EditFail2BanRequestAttr implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Edit_Fail2Ban_request_attr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'backlist' => 'string',
        'banTime' => 'float',
        'maxAttempts' => 'float',
        'netbanIpv4' => 'float',
        'netbanIpv6' => 'float',
        'retryWindow' => 'float',
        'whitelist' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'backlist' => null,
        'banTime' => null,
        'maxAttempts' => null,
        'netbanIpv4' => null,
        'netbanIpv6' => null,
        'retryWindow' => null,
        'whitelist' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backlist' => 'backlist',
        'banTime' => 'ban_time',
        'maxAttempts' => 'max_attempts',
        'netbanIpv4' => 'netban_ipv4',
        'netbanIpv6' => 'netban_ipv6',
        'retryWindow' => 'retry_window',
        'whitelist' => 'whitelist'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backlist' => 'setBacklist',
        'banTime' => 'setBanTime',
        'maxAttempts' => 'setMaxAttempts',
        'netbanIpv4' => 'setNetbanIpv4',
        'netbanIpv6' => 'setNetbanIpv6',
        'retryWindow' => 'setRetryWindow',
        'whitelist' => 'setWhitelist'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backlist' => 'getBacklist',
        'banTime' => 'getBanTime',
        'maxAttempts' => 'getMaxAttempts',
        'netbanIpv4' => 'getNetbanIpv4',
        'netbanIpv6' => 'getNetbanIpv6',
        'retryWindow' => 'getRetryWindow',
        'whitelist' => 'getWhitelist'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backlist'] = $data['backlist'] ?? null;
        $this->container['banTime'] = $data['banTime'] ?? null;
        $this->container['maxAttempts'] = $data['maxAttempts'] ?? null;
        $this->container['netbanIpv4'] = $data['netbanIpv4'] ?? null;
        $this->container['netbanIpv6'] = $data['netbanIpv6'] ?? null;
        $this->container['retryWindow'] = $data['retryWindow'] ?? null;
        $this->container['whitelist'] = $data['whitelist'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backlist
     *
     * @return string|null
     */
    public function getBacklist()
    {
        return $this->container['backlist'];
    }

    /**
     * Sets backlist
     *
     * @param string|null $backlist the backlisted ips or hostnames separated by comma
     *
     * @return self
     */
    public function setBacklist($backlist)
    {
        $this->container['backlist'] = $backlist;

        return $this;
    }

    /**
     * Gets banTime
     *
     * @return float|null
     */
    public function getBanTime()
    {
        return $this->container['banTime'];
    }

    /**
     * Sets banTime
     *
     * @param float|null $banTime the time a ip should be banned
     *
     * @return self
     */
    public function setBanTime($banTime)
    {
        $this->container['banTime'] = $banTime;

        return $this;
    }

    /**
     * Gets maxAttempts
     *
     * @return float|null
     */
    public function getMaxAttempts()
    {
        return $this->container['maxAttempts'];
    }

    /**
     * Sets maxAttempts
     *
     * @param float|null $maxAttempts the maximum numbe of wrong logins before a ip is banned
     *
     * @return self
     */
    public function setMaxAttempts($maxAttempts)
    {
        $this->container['maxAttempts'] = $maxAttempts;

        return $this;
    }

    /**
     * Gets netbanIpv4
     *
     * @return float|null
     */
    public function getNetbanIpv4()
    {
        return $this->container['netbanIpv4'];
    }

    /**
     * Sets netbanIpv4
     *
     * @param float|null $netbanIpv4 the networks mask to ban for ipv4
     *
     * @return self
     */
    public function setNetbanIpv4($netbanIpv4)
    {
        $this->container['netbanIpv4'] = $netbanIpv4;

        return $this;
    }

    /**
     * Gets netbanIpv6
     *
     * @return float|null
     */
    public function getNetbanIpv6()
    {
        return $this->container['netbanIpv6'];
    }

    /**
     * Sets netbanIpv6
     *
     * @param float|null $netbanIpv6 the networks mask to ban for ipv6
     *
     * @return self
     */
    public function setNetbanIpv6($netbanIpv6)
    {
        $this->container['netbanIpv6'] = $netbanIpv6;

        return $this;
    }

    /**
     * Gets retryWindow
     *
     * @return float|null
     */
    public function getRetryWindow()
    {
        return $this->container['retryWindow'];
    }

    /**
     * Sets retryWindow
     *
     * @param float|null $retryWindow the maximum time in which a ip as to login with false credentials to be banned
     *
     * @return self
     */
    public function setRetryWindow($retryWindow)
    {
        $this->container['retryWindow'] = $retryWindow;

        return $this;
    }

    /**
     * Gets whitelist
     *
     * @return string|null
     */
    public function getWhitelist()
    {
        return $this->container['whitelist'];
    }

    /**
     * Sets whitelist
     *
     * @param string|null $whitelist whitelisted ips or hostnames sepereated by comma
     *
     * @return self
     */
    public function setWhitelist($whitelist)
    {
        $this->container['whitelist'] = $whitelist;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


