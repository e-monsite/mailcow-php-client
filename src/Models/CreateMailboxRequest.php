<?php
/**
 * CreateMailboxRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * mailcow API
 *
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailCow\Models;

use \ArrayAccess;
use \MailCow\ObjectSerializer;

/**
 * CreateMailboxRequest Class Doc Comment
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreateMailboxRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Create_mailbox_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'domain' => 'string',
        'localPart' => 'string',
        'name' => 'string',
        'password2' => 'string',
        'password' => 'string',
        'quota' => 'float',
        'forcePwUpdate' => 'bool',
        'tlsEnforceIn' => 'bool',
        'tlsEnforceOut' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'domain' => null,
        'localPart' => null,
        'name' => null,
        'password2' => null,
        'password' => null,
        'quota' => null,
        'forcePwUpdate' => null,
        'tlsEnforceIn' => null,
        'tlsEnforceOut' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'domain' => 'domain',
        'localPart' => 'local_part',
        'name' => 'name',
        'password2' => 'password2',
        'password' => 'password',
        'quota' => 'quota',
        'forcePwUpdate' => 'force_pw_update',
        'tlsEnforceIn' => 'tls_enforce_in',
        'tlsEnforceOut' => 'tls_enforce_out'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'domain' => 'setDomain',
        'localPart' => 'setLocalPart',
        'name' => 'setName',
        'password2' => 'setPassword2',
        'password' => 'setPassword',
        'quota' => 'setQuota',
        'forcePwUpdate' => 'setForcePwUpdate',
        'tlsEnforceIn' => 'setTlsEnforceIn',
        'tlsEnforceOut' => 'setTlsEnforceOut'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'domain' => 'getDomain',
        'localPart' => 'getLocalPart',
        'name' => 'getName',
        'password2' => 'getPassword2',
        'password' => 'getPassword',
        'quota' => 'getQuota',
        'forcePwUpdate' => 'getForcePwUpdate',
        'tlsEnforceIn' => 'getTlsEnforceIn',
        'tlsEnforceOut' => 'getTlsEnforceOut'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['localPart'] = $data['localPart'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['password2'] = $data['password2'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['quota'] = $data['quota'] ?? null;
        $this->container['forcePwUpdate'] = $data['forcePwUpdate'] ?? null;
        $this->container['tlsEnforceIn'] = $data['tlsEnforceIn'] ?? null;
        $this->container['tlsEnforceOut'] = $data['tlsEnforceOut'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active is mailbox active or not
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain name
     *
     * @return self
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets localPart
     *
     * @return string|null
     */
    public function getLocalPart()
    {
        return $this->container['localPart'];
    }

    /**
     * Sets localPart
     *
     * @param string|null $localPart left part of email address
     *
     * @return self
     */
    public function setLocalPart($localPart)
    {
        $this->container['localPart'] = $localPart;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Full name of the mailbox user
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets password2
     *
     * @return string|null
     */
    public function getPassword2()
    {
        return $this->container['password2'];
    }

    /**
     * Sets password2
     *
     * @param string|null $password2 mailbox password for confirmation
     *
     * @return self
     */
    public function setPassword2($password2)
    {
        $this->container['password2'] = $password2;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password mailbox password
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return float|null
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param float|null $quota mailbox quota
     *
     * @return self
     */
    public function setQuota($quota)
    {
        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets forcePwUpdate
     *
     * @return bool|null
     */
    public function getForcePwUpdate()
    {
        return $this->container['forcePwUpdate'];
    }

    /**
     * Sets forcePwUpdate
     *
     * @param bool|null $forcePwUpdate forces the user to update its password on first login
     *
     * @return self
     */
    public function setForcePwUpdate($forcePwUpdate)
    {
        $this->container['forcePwUpdate'] = $forcePwUpdate;

        return $this;
    }

    /**
     * Gets tlsEnforceIn
     *
     * @return bool|null
     */
    public function getTlsEnforceIn()
    {
        return $this->container['tlsEnforceIn'];
    }

    /**
     * Sets tlsEnforceIn
     *
     * @param bool|null $tlsEnforceIn force inbound email tls encryption
     *
     * @return self
     */
    public function setTlsEnforceIn($tlsEnforceIn)
    {
        $this->container['tlsEnforceIn'] = $tlsEnforceIn;

        return $this;
    }

    /**
     * Gets tlsEnforceOut
     *
     * @return bool|null
     */
    public function getTlsEnforceOut()
    {
        return $this->container['tlsEnforceOut'];
    }

    /**
     * Sets tlsEnforceOut
     *
     * @param bool|null $tlsEnforceOut force oubound tmail tls encryption
     *
     * @return self
     */
    public function setTlsEnforceOut($tlsEnforceOut)
    {
        $this->container['tlsEnforceOut'] = $tlsEnforceOut;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


