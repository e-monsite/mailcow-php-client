<?php
/**
 * Apiv1editdomainAttr
 *
 * PHP version 5
 *
 * @category Class
 * @package  MailCow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * mailcow API
 *
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MailCow\Models;

use \ArrayAccess;
use \MailCow\ObjectSerializer;

/**
 * Apiv1editdomainAttr Class Doc Comment
 *
 * @category Class
 * @package  MailCow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Apiv1editdomainAttr implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'apiv1editdomain_attr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
'aliases' => 'float',
'backupmx' => 'bool',
'defquota' => 'float',
'description' => 'string',
'gal' => 'bool',
'mailboxes' => 'float',
'maxquota' => 'float',
'quota' => 'float',
'relay_all_recipients' => 'bool',
'relayhost' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
'aliases' => null,
'backupmx' => null,
'defquota' => null,
'description' => null,
'gal' => null,
'mailboxes' => null,
'maxquota' => null,
'quota' => null,
'relay_all_recipients' => null,
'relayhost' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
'aliases' => 'aliases',
'backupmx' => 'backupmx',
'defquota' => 'defquota',
'description' => 'description',
'gal' => 'gal',
'mailboxes' => 'mailboxes',
'maxquota' => 'maxquota',
'quota' => 'quota',
'relay_all_recipients' => 'relay_all_recipients',
'relayhost' => 'relayhost'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
'aliases' => 'setAliases',
'backupmx' => 'setBackupmx',
'defquota' => 'setDefquota',
'description' => 'setDescription',
'gal' => 'setGal',
'mailboxes' => 'setMailboxes',
'maxquota' => 'setMaxquota',
'quota' => 'setQuota',
'relay_all_recipients' => 'setRelayAllRecipients',
'relayhost' => 'setRelayhost'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
'aliases' => 'getAliases',
'backupmx' => 'getBackupmx',
'defquota' => 'getDefquota',
'description' => 'getDescription',
'gal' => 'getGal',
'mailboxes' => 'getMailboxes',
'maxquota' => 'getMaxquota',
'quota' => 'getQuota',
'relay_all_recipients' => 'getRelayAllRecipients',
'relayhost' => 'getRelayhost'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['aliases'] = isset($data['aliases']) ? $data['aliases'] : null;
        $this->container['backupmx'] = isset($data['backupmx']) ? $data['backupmx'] : null;
        $this->container['defquota'] = isset($data['defquota']) ? $data['defquota'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['gal'] = isset($data['gal']) ? $data['gal'] : null;
        $this->container['mailboxes'] = isset($data['mailboxes']) ? $data['mailboxes'] : null;
        $this->container['maxquota'] = isset($data['maxquota']) ? $data['maxquota'] : null;
        $this->container['quota'] = isset($data['quota']) ? $data['quota'] : null;
        $this->container['relay_all_recipients'] = isset($data['relay_all_recipients']) ? $data['relay_all_recipients'] : null;
        $this->container['relayhost'] = isset($data['relayhost']) ? $data['relayhost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active is domain active or not
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets aliases
     *
     * @return float
     */
    public function getAliases()
    {
        return $this->container['aliases'];
    }

    /**
     * Sets aliases
     *
     * @param float $aliases limit count of aliases associated with this domain
     *
     * @return $this
     */
    public function setAliases($aliases)
    {
        $this->container['aliases'] = $aliases;

        return $this;
    }

    /**
     * Gets backupmx
     *
     * @return bool
     */
    public function getBackupmx()
    {
        return $this->container['backupmx'];
    }

    /**
     * Sets backupmx
     *
     * @param bool $backupmx relay domain or not
     *
     * @return $this
     */
    public function setBackupmx($backupmx)
    {
        $this->container['backupmx'] = $backupmx;

        return $this;
    }

    /**
     * Gets defquota
     *
     * @return float
     */
    public function getDefquota()
    {
        return $this->container['defquota'];
    }

    /**
     * Sets defquota
     *
     * @param float $defquota predefined mailbox quota in `add mailbox` form
     *
     * @return $this
     */
    public function setDefquota($defquota)
    {
        $this->container['defquota'] = $defquota;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of domain
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets gal
     *
     * @return bool
     */
    public function getGal()
    {
        return $this->container['gal'];
    }

    /**
     * Sets gal
     *
     * @param bool $gal is domain global address list active or not, it enables shared contacts accross domain in SOGo webmail
     *
     * @return $this
     */
    public function setGal($gal)
    {
        $this->container['gal'] = $gal;

        return $this;
    }

    /**
     * Gets mailboxes
     *
     * @return float
     */
    public function getMailboxes()
    {
        return $this->container['mailboxes'];
    }

    /**
     * Sets mailboxes
     *
     * @param float $mailboxes limit count of mailboxes associated with this domain
     *
     * @return $this
     */
    public function setMailboxes($mailboxes)
    {
        $this->container['mailboxes'] = $mailboxes;

        return $this;
    }

    /**
     * Gets maxquota
     *
     * @return float
     */
    public function getMaxquota()
    {
        return $this->container['maxquota'];
    }

    /**
     * Sets maxquota
     *
     * @param float $maxquota maximum quota per mailbox
     *
     * @return $this
     */
    public function setMaxquota($maxquota)
    {
        $this->container['maxquota'] = $maxquota;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return float
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param float $quota maximum quota for this domain (for all mailboxes in sum)
     *
     * @return $this
     */
    public function setQuota($quota)
    {
        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets relay_all_recipients
     *
     * @return bool
     */
    public function getRelayAllRecipients()
    {
        return $this->container['relay_all_recipients'];
    }

    /**
     * Sets relay_all_recipients
     *
     * @param bool $relay_all_recipients if not, them you have to create \"dummy\" mailbox for each address to relay
     *
     * @return $this
     */
    public function setRelayAllRecipients($relay_all_recipients)
    {
        $this->container['relay_all_recipients'] = $relay_all_recipients;

        return $this;
    }

    /**
     * Gets relayhost
     *
     * @return float
     */
    public function getRelayhost()
    {
        return $this->container['relayhost'];
    }

    /**
     * Sets relayhost
     *
     * @param float $relayhost id of relayhost
     *
     * @return $this
     */
    public function setRelayhost($relayhost)
    {
        $this->container['relayhost'] = $relayhost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
