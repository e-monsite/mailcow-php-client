<?php
/**
 * LogsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * mailcow API
 *
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace MailCow\Test\Api;

use \MailCow\Configuration;
use \MailCow\ApiException;
use \MailCow\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * LogsApiTest Class Doc Comment
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LogsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for getACMELogs
     *
     * Get ACME logs.
     *
     */
    public function testGetACMELogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApiLogs
     *
     * Get Api logs.
     *
     */
    public function testGetApiLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAutodiscoverLogs
     *
     * Get Autodiscover logs.
     *
     */
    public function testGetAutodiscoverLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDovecotLogs
     *
     * Get Dovecot logs.
     *
     */
    public function testGetDovecotLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetfilterLogs
     *
     * Get Netfilter logs.
     *
     */
    public function testGetNetfilterLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPostfixLogs
     *
     * Get Postfix logs.
     *
     */
    public function testGetPostfixLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRatelimitLogs
     *
     * Get Ratelimit logs.
     *
     */
    public function testGetRatelimitLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRspamdLogs
     *
     * Get Rspamd logs.
     *
     */
    public function testGetRspamdLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSOGoLogs
     *
     * Get SOGo logs.
     *
     */
    public function testGetSOGoLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWatchdogLogs
     *
     * Get Watchdog logs.
     *
     */
    public function testGetWatchdogLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
