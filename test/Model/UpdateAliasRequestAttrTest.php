<?php
/**
 * UpdateAliasRequestAttrTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * mailcow API
 *
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace MailCow\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * UpdateAliasRequestAttrTest Class Doc Comment
 *
 * @category    Class
 * @description UpdateAliasRequestAttr
 * @package     MailCow
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class UpdateAliasRequestAttrTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "UpdateAliasRequestAttr"
     */
    public function testUpdateAliasRequestAttr()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "active"
     */
    public function testPropertyActive()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "address"
     */
    public function testPropertyAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "goto"
     */
    public function testPropertyGoto()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "gotoHam"
     */
    public function testPropertyGotoHam()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "gotoNull"
     */
    public function testPropertyGotoNull()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "gotoSpam"
     */
    public function testPropertyGotoSpam()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "privateComment"
     */
    public function testPropertyPrivateComment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "publicComment"
     */
    public function testPropertyPublicComment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sogoVisible"
     */
    public function testPropertySogoVisible()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
