<?php
/**
 * UpdateSyncJobRequestAttrTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailCow
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * mailcow API
 *
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace MailCow\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * UpdateSyncJobRequestAttrTest Class Doc Comment
 *
 * @category    Class
 * @description UpdateSyncJobRequestAttr
 * @package     MailCow
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class UpdateSyncJobRequestAttrTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "UpdateSyncJobRequestAttr"
     */
    public function testUpdateSyncJobRequestAttr()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "active"
     */
    public function testPropertyActive()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "automap"
     */
    public function testPropertyAutomap()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "customParams"
     */
    public function testPropertyCustomParams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "delete1"
     */
    public function testPropertyDelete1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "delete2"
     */
    public function testPropertyDelete2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "delete2duplicates"
     */
    public function testPropertyDelete2duplicates()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enc1"
     */
    public function testPropertyEnc1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "exclude"
     */
    public function testPropertyExclude()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "host1"
     */
    public function testPropertyHost1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "maxage"
     */
    public function testPropertyMaxage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "maxbytespersecond"
     */
    public function testPropertyMaxbytespersecond()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minsInterval"
     */
    public function testPropertyMinsInterval()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "password1"
     */
    public function testPropertyPassword1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "port1"
     */
    public function testPropertyPort1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "skipcrossduplicates"
     */
    public function testPropertySkipcrossduplicates()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subfolder2"
     */
    public function testPropertySubfolder2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subscribeall"
     */
    public function testPropertySubscribeall()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "timeout1"
     */
    public function testPropertyTimeout1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "timeout2"
     */
    public function testPropertyTimeout2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "user1"
     */
    public function testPropertyUser1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
